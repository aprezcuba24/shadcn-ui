{
  "name": "table-data",
  "dependencies": [],
  "registryDependencies": [
    "table"
  ],
  "files": [
    {
      "name": "table-data.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  OnChangeFn,\n  PaginationState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Paginate, PaginationResult } from \"@/types/pagination\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/default/ui/table\"\n\nexport type TableDataProps = {\n  pagination: PaginationResult<any>\n  columns: ColumnDef<any>[]\n  paginate: Paginate\n}\n\nexport function TableData({ pagination, columns, paginate }: TableDataProps) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n  const handlePaginate: OnChangeFn<PaginationState> = (\n    paginateUpdater: any\n  ) => {\n    const { pageIndex, pageSize } = paginateUpdater(pagination)\n    paginate({ pageIndex, pageSize })\n  }\n\n  const table = useReactTable({\n    data: pagination.data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    manualPagination: true,\n    onPaginationChange: handlePaginate,\n    rowCount: pagination.total,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n      pagination,\n    },\n  })\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"rounded-md border mb-4\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2\">\n        <div className=\"flex-1 text-sm text-muted-foreground\">\n          {pagination.firstRecordNumber} - {pagination.lastRecordNumber} of{\" \"}\n          {pagination.total}\n        </div>\n        <div className=\"space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n"
    },
    {
      "name": "pagination.ts",
      "content": "export type PaginationResult<T> = {\n  total: number\n  totalPage: number\n  pageIndex: number\n  pageSize: number\n  firstRecordNumber: number\n  lastRecordNumber: number\n  data: T[]\n}\n\nexport type PaginateData = {\n  pageIndex?: number\n  pageSize?: number\n  where?: any\n}\nexport type Paginate = (data: PaginateData) => void\n"
    }
  ],
  "type": "components:ui"
}